// Define the Vector structure
struct Vector { X, Y, Values }

// Define a function to add values to a vector
def addValues: vector, values {
    for value in $values$ {
        vector.Values = append $vector.Values$, $value$
    }
    return $vector$
}

// Create two Vector instances
var i1 = Vector: 0, 99, []
var i2 = Vector: 0, 99, []

// Create an array with points to i1 and i2
var a = [point: $i1$, $i2$]

// Modify the X property of i1 and i2
i1.X = 15
i2.X = 15

// Print the X values of the array elements
print "1:$a[0].X$, 2:$a[1].X$"
// Expected output: "1:15, 2:0"

// Add values to the Values property of i1 and i2 using a function
var valuesToAdd1 = [1, 2, 3]
var valuesToAdd2 = [4, 5, 6]

i1 = addValues $i1$, $valuesToAdd1$
i2 = addValues $i2$, $valuesToAdd2$

print "i1 Values: $i1.Values$" // Should print: [1, 2, 3]
print "i2 Values: $i2.Values$" // Should print: [4, 5, 6]

// Using a for loop to print Values with their indixes for i1 and i2
for i in length $i1.Values$ {
    print "i1 Value at index $i$: $i1.Values[i]$"
}

for j in length $i2.Values$ {
    print "i2 Value at index $j$: $i2.Values[j]$"
}

// Using a while loop to sum the Values in i1
var sum1 = 0
var index1 = 0
while $index1$ < length $i1.Values$ {
    sum1 = ($sum1$ + $i1.Values[index1]$)
    index1 + 1
}

print "Sum of i1 Values: $sum1$" // Should print: Sum of i1 Values: 6

// Using a while loop to sum the Values in i2
var sum2 = 0
var index2 = 0
while $index2$ < length $i2.Values$ {
    sum2 = ($sum2$ + $i2.Values[index2]$)
    index2 + 1
}

print "Sum of i2 Values: $sum2$" // Should print: Sum of i2 Values: 15

